Обзор методов и алгоритмов решения поставленной задачи 
(способы хранения данных - файлы, организации данных - массивы,  очереди, стеки; сортировка, поиск) 3-6

В качестве метода программирования для курсового проекта выбрано объектно-ориентированное программирование.
Объектно-ориентированное программирование (ООП) — методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определённого класса, а классы образуют иерархию наследования. В центре ООП находится понятие объекта. Объект — это сущность, которой можно посылать сообщения и которая может на них реагировать, используя свои данные. Объект — это экземпляр класса. Данные объекта скрыты от остальной программы. 
В настоящее время количество прикладных языков программирования, реализующих объектно-ориентированную парадигму, является наибольшим по отношению к другим парадигмам. Наиболее распространённые в промышленности языки C++, Delphi, C#, Java.

В качестве способа объединения входных данных используются массивы (динамически создаваемые). Массивы представляют собой набор однотипных пронумерованных данных. 
Общие особенности работы с массивами: 
1. Индексация с 0; индексы массива – только целые положительные числа. 
2. Имя массива является указателем на первый байт нулевого элемента массива и хранит соответствующий адрес. 
3. Не производится проверка выхода за границы массива, в связи с чем требуется анализ кода на предотвращение ситуаций, потенциально приводящих к выходу за пределы массива. 

В качестве способа хранения данных для курсового проекта выбрано хранение в файлах (*.txt).
Выполнение операций чтения/записи в файл сведено к минимуму (т. е. после однократной выгрузки данных из файла в массив дальнейшая работа ведется с этим массивом, а не происходит многократное считывание данных из файла в каждой функции). 
Реализовать данный принцип можно двумя способами. В данной курсовой работе, в начале программы осуществляется чтение (импорт) информации из файла в массив, далее все операции с данными производятся посредством массива, в конце программы (непосредственно перед ее закрытием) происходит запись (экспорт) информации из массива в файл.

В качестве выбора способа описания входных данных приводится описание следующих классов: 
Класс User (организация данных о пользователях):
typeUser: тип пользователя (главный администратор, администратор, пользователь);
login: логин пользователя;
password: пароль пользователя;
Класс ListUsers (методы работы с данными о пользователях)
id: уникальный номер записи о пользователе;
user: объект User с данными о пользователе;
Класс Car (организация данных об автомобилях)
typeCar: тип автомобиля;
capacityCar: грузоподъемность автомобиля;
Класс ListUniqueCars (методы работы с данными об автомобилях)
id: уникальный номер записи об автомобиле;
car: объект Car с данными об автомобиле;
Класс Carpark (организация данных о состоянии автопарка)
id: уникальный номер записи об автомобиле в автопарке;
conditionCar: состояние автомобиля;
idCar: уникальный номер автомобиля из списка ListUniqueCars;
 
Обоснование выбранных методов и алгоритмов (обоснование выбора: сложность, точность, время) 2-3

Основные преимущества использования ООП:
«Более естественная» декомпозиция программного обеспечения, которая существенно облегчает его разработку;
ООП дает возможность создавать расширяемые системы. Расширяемость означает, что существующую систему можно заставить работать с новыми компонентами, причем без внесения в нее каких-либо изменений. Компоненты могут быть добавлены на этапе выполнения;
ООП помогает этого достичь многоразового использования программного обеспечения без нарушения работы уже имеющихся компонентов;

Основные преимущества использования текстовых файлов для хранения информации:
наглядность – возможен просмотр средствами текстовых редакторов;
читабельный вид сохраненных данных позволяет анализировать содержимое;

Основные преимущества использования массивов:
экономия памяти;
cache friendly - в массиве значения находятся рядом друг с другом в памяти. Они могут быть легко доступны из процессора в кэш;
простая отладка;

Применение сортировки вставками (сортировка вставками (Insertion Sort) — это простой алгоритм сортировки. Суть его заключается в том что, на каждом шаге алгоритма мы берем один из элементов массива, находим позицию для вставки и вставляем.) имеет сложность n2, количество сравнений вычисляется по формуле n*(n-1)/2. Сортировка вставками наиболее эффективна когда массив уже частично отсортирован и когда элементов массива не много. Если же элементов меньше 10 то данный алгоритм является лучшим.

Применение двоичного или логарифмического поиска элемента массива обусловлено тем, что временная сложность алгоритма двоичного поиска равна O(log (N)) из-за деления массива пополам. Она превосходит O(N) линейного алгоритма. Двоичный поиск требует предварительной сортировки набора данных.




 
Литература:
1.	https://ru.wikipedia.org/wiki
2.	Ханспетер Мессенбок  "Плюсы и минусы объектно-ориентированного программирования"
(c) 1998, ИнфоАрт 
3.	Джон Клейнберг, Эва Тардос. Год издания: 2016 "Алгоритмы: разработка и применение"
